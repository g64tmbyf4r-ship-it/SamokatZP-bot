import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import asyncio
import json
import os

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 710958950  # —Ç–≤–æ–π Telegram ID
STATS_FILE = "stats.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ===
def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
                data["unique_users"] = set(data["unique_users"])
                data["today_date"] = datetime.strptime(data["today_date"], "%Y-%m-%d").date()
                return data
            except Exception:
                pass
    return {"today_date": datetime.now().date(), "unique_users": set(), "calculations": 0}

def save_stats():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
    data = {
        "today_date": str(stats["today_date"]),
        "unique_users": list(stats["unique_users"]),
        "calculations": stats["calculations"],
    }
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

stats = load_stats()

def update_stats(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"""
    global stats
    today = datetime.now().date()
    if stats["today_date"] != today:
        stats = {"today_date": today, "unique_users": set(), "calculations": 0}
    stats["unique_users"].add(user_id)
    stats["calculations"] += 1
    save_stats()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    hourly_rate = State()
    order_rate_15 = State()
    hours_worked = State()
    orders_15 = State()
    orders_30 = State()
    bonus_10 = State()
    bonus_30 = State()
    bonus_70 = State()
    weather_bonus_orders = State()
    weekend_bonus_hourly = State()

# === –õ–æ–≥–∏–∫–∞ ===
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üí∏ –í–≤–µ–¥–∏ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (‚ÇΩ/—á–∞—Å):")
    await state.set_state(Form.hourly_rate)

@dp.message(Form.hourly_rate)
async def hourly_rate_handler(message: types.Message, state: FSMContext):
    await state.update_data(hourly_rate=float(message.text))
    await message.answer("üì¶ –ö–∞–∫–∞—è —É —Ç–µ–±—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ 15-–º–∏–Ω—É—Ç–Ω—ã–π (‚ÇΩ):")
    await state.set_state(Form.order_rate_15)

@dp.message(Form.order_rate_15)
async def order_rate_handler(message: types.Message, state: FSMContext):
    await state.update_data(order_rate_15=float(message.text))
    await message.answer("‚è∞ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è?")
    await state.set_state(Form.hours_worked)

@dp.message(Form.hours_worked)
async def hours_handler(message: types.Message, state: FSMContext):
    await state.update_data(hours=float(message.text))
    await message.answer("üö¥‚Äç‚ôÇÔ∏è –°–∫–æ–ª—å–∫–æ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ?")
    await state.set_state(Form.orders_15)

@dp.message(Form.orders_15)
async def orders15_handler(message: types.Message, state: FSMContext):
    await state.update_data(orders_15=int(message.text))
    await message.answer("üöö –°–∫–æ–ª—å–∫–æ 30-–º–∏–Ω—É—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ?")
    await state.set_state(Form.orders_30)

@dp.message(Form.orders_30)
async def orders30_handler(message: types.Message, state: FSMContext):
    await state.update_data(orders_30=int(message.text))
    await message.answer("üîπ –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +10‚ÇΩ –∑–∞ 45 –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å?")
    await state.set_state(Form.bonus_10)

@dp.message(Form.bonus_10)
async def bonus10_handler(message: types.Message, state: FSMContext):
    await state.update_data(bonus_10=int(message.text))
    await message.answer("üî∏ –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +30‚ÇΩ?")
    await state.set_state(Form.bonus_30)

@dp.message(Form.bonus_30)
async def bonus30_handler(message: types.Message, state: FSMContext):
    await state.update_data(bonus_30=int(message.text))
    await message.answer("üî∫ –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +70‚ÇΩ?")
    await state.set_state(Form.bonus_70)

@dp.message(Form.bonus_70)
async def bonus70_handler(message: types.Message, state: FSMContext):
    await state.update_data(bonus_70=int(message.text))
    await message.answer("üì¶ –ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +10‚ÇΩ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É —Å–µ–≥–æ–¥–Ω—è –∑–∞ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(Form.weather_bonus_orders)

@dp.message(Form.weather_bonus_orders)
async def weather_bonus_orders_handler(message: types.Message, state: FSMContext):
    await state.update_data(weather_bonus_orders=message.text.lower() == "–¥–∞")
    await message.answer("üå¶Ô∏è –ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +15‚ÇΩ –∫ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ –∑–∞ –≤—Å/–ø–Ω? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(Form.weekend_bonus_hourly)

@dp.message(Form.weekend_bonus_hourly)
async def weekend_bonus_handler(message: types.Message, state: FSMContext):
    data = await state.update_data(weekend_bonus_hourly=message.text.lower() == "–¥–∞")

    hourly_rate = data["hourly_rate"]
    order_rate_15 = data["order_rate_15"]
    hours = data["hours"]
    orders_15 = data["orders_15"]
    orders_30 = data["orders_30"]
    bonus_10 = data["bonus_10"]
    bonus_30 = data["bonus_30"]
    bonus_70 = data["bonus_70"]
    weather_bonus_orders = data["weather_bonus_orders"]
    weekend_bonus_hourly = data["weekend_bonus_hourly"]

    # –†–∞—Å—á—ë—Ç
    hourly_total = hours * (hourly_rate + (15 if weekend_bonus_hourly else 0))
    orders_total = (orders_15 * order_rate_15) + (orders_30 * (order_rate_15 + 10))
    bonuses_total = (bonus_10 * 10) + (bonus_30 * 30) + (bonus_70 * 70)
    weather_bonus_total = (orders_15 + orders_30) * 10 if weather_bonus_orders else 0

    total = hourly_total + orders_total + bonuses_total + weather_bonus_total

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_stats(message.from_user.id)

    text = (
        f"üìä –ò—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å:\n\n"
        f"‚è∞ –ß–∞—Å—ã: {hours} √ó {hourly_rate}‚ÇΩ = {hourly_total:.2f}‚ÇΩ\n"
        f"üö¥ 15-–º–∏–Ω –∑–∞–∫–∞–∑–æ–≤: {orders_15} √ó {order_rate_15}‚ÇΩ = {orders_15 * order_rate_15:.2f}‚ÇΩ\n"
        f"üöö 30-–º–∏–Ω –∑–∞–∫–∞–∑–æ–≤: {orders_30} √ó {order_rate_15 + 10}‚ÇΩ = {orders_30 * (order_rate_15 + 10):.2f}‚ÇΩ\n"
        f"üí∞ –ù–∞–¥–±–∞–≤–∫–∏: +{bonuses_total}‚ÇΩ\n"
        f"üå¶Ô∏è –ü–æ–≥–æ–¥–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: +{weather_bonus_total}‚ÇΩ\n\n"
        f"üí∏ –ò–¢–û–ì–û: <b>{total:.2f}‚ÇΩ</b>"
    )

    await message.answer(text, parse_mode="HTML")
    await state.clear()

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    today = datetime.now().strftime("%d.%m.%Y")
    total_users = len(stats["unique_users"])
    total_calculations = stats["calculations"]

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}</b>\n\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üßÆ –í—Å–µ–≥–æ —Ä–∞—Å—á—ë—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å: {total_calculations}\n"
        f"üíæ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {stats['today_date']}"
    )

    await message.answer(text, parse_mode="HTML")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
