import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
import asyncio
import os

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


@dp.message(Command("start"))
async def start(msg: types.Message):
    user_data[msg.from_user.id] = {}
    user_data[msg.from_user.id]["step"] = "hourly_rate"
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üí∏ –í–≤–µ–¥–∏ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (‚ÇΩ/—á–∞—Å):")


@dp.message(F.text)
async def process(msg: types.Message):
    user_id = msg.from_user.id
    text = msg.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Å /start
    if user_id not in user_data or "step" not in user_data[user_id]:
        user_data[user_id] = {"step": "hourly_rate"}
        await msg.answer("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. üí∏ –í–≤–µ–¥–∏ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (‚ÇΩ/—á–∞—Å):")
        return

    step = user_data[user_id]["step"]

    # === –õ–û–ì–ò–ö–ê –í–û–ü–†–û–°–û–í ===

    if step == "hourly_rate":
        try:
            user_data[user_id]["hourly_rate"] = float(text)
            user_data[user_id]["step"] = "order_rate"
            await msg.answer("üí∞ –°–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ (‚ÇΩ)?")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250")
            return

    elif step == "order_rate":
        try:
            user_data[user_id]["order_rate"] = float(text)
            user_data[user_id]["step"] = "hours"
            await msg.answer("‚è∞ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è?")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8")
            return

    elif step == "hours":
        try:
            user_data[user_id]["hours"] = float(text)
            user_data[user_id]["step"] = "orders"
            await msg.answer("üì¶ –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–∏–ª —Å–µ–≥–æ–¥–Ω—è?")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15")
            return

    elif step == "orders":
        try:
            user_data[user_id]["orders"] = int(text)
            user_data[user_id]["step"] = "bonus10"
            await msg.answer("‚ûï –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +10‚ÇΩ?")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
            return

    elif step == "bonus10":
        try:
            user_data[user_id]["bonus10"] = int(text)
            user_data[user_id]["step"] = "bonus30"
            await msg.answer("üöÄ –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +30‚ÇΩ?")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2")
            return

    elif step == "bonus30":
        try:
            user_data[user_id]["bonus30"] = int(text)
            user_data[user_id]["step"] = "bonus70"
            await msg.answer("üî• –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +70‚ÇΩ?")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1")
            return

    elif step == "bonus70":
        try:
            user_data[user_id]["bonus70"] = int(text)
            user_data[user_id]["step"] = "global10"
            await msg.answer("üì¶ –ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +10‚ÇΩ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É —Å–µ–≥–æ–¥–Ω—è? (–¥–∞/–Ω–µ—Ç)")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0")
            return

    elif step == "global10":
        answer = text.lower()
        user_data[user_id]["global10"] = (answer == "–¥–∞")
        user_data[user_id]["step"] = "weather15"
        await msg.answer("üå¶Ô∏è –ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +15‚ÇΩ –∫ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ –∑–∞ –ø–æ–≥–æ–¥—É? (–¥–∞/–Ω–µ—Ç)")

    elif step == "weather15":
        answer = text.lower()
        user_data[user_id]["weather15"] = (answer == "–¥–∞")

        # === –†–ê–°–ß–Å–¢ ===
        data = user_data[user_id]

        hourly_rate = data["hourly_rate"]
        if data["weather15"]:
            hourly_rate += 15

        base = data["hours"] * hourly_rate
        order_total = data["orders"] * data["order_rate"]

        # –ù–∞–¥–±–∞–≤–∫–∏
        bonus_total = (
            data["bonus10"] * 10
            + data["bonus30"] * 30
            + data["bonus70"] * 70
        )

        if data["global10"]:
            bonus_total += data["orders"] * 10

        total = base + order_total + bonus_total

        await msg.answer(
            f"üíµ <b>–ò—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"‚Äî –ß–∞—Å–æ–≤: {data['hours']} √ó {hourly_rate}‚ÇΩ = {base:.0f}‚ÇΩ\n"
            f"‚Äî –ó–∞–∫–∞–∑—ã: {data['orders']} √ó {data['order_rate']}‚ÇΩ = {order_total:.0f}‚ÇΩ\n"
            f"‚Äî –ù–∞–¥–±–∞–≤–∫–∏: {bonus_total:.0f}‚ÇΩ\n\n"
            f"üí∞ <b>–í—Å–µ–≥–æ:</b> {total:.0f}‚ÇΩ",
            parse_mode="HTML"
        )

        # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
        user_data[user_id]["step"] = "done"


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
