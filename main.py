from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
import asyncio
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable is not set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}


@dp.message(Command("start"))
async def start(msg: types.Message):
    user_data[msg.from_user.id] = {"step": "hourly_rate"}
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üí∏ –í–≤–µ–¥–∏ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (‚ÇΩ/—á–∞—Å):")


@dp.message(F.text)
async def process(msg: types.Message):
    user_id = msg.from_user.id
    if user_id not in user_data:
        await msg.answer("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    step = user_data[user_id].get("step")

    # –®–∞–≥ 1 ‚Äî —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
    if step == "hourly_rate":
        try:
            user_data[user_id]["hourly_rate"] = float(msg.text)
            user_data[user_id]["step"] = "order_rate"
            await msg.answer("–°–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ (‚ÇΩ)?")
        except ValueError:
            await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 250.")
        return

    # –®–∞–≥ 2 ‚Äî —Å—Ç–∞–≤–∫–∞ –∑–∞ –∑–∞–∫–∞–∑
    if step == "order_rate":
        try:
            user_data[user_id]["order_rate"] = float(msg.text)
            user_data[user_id]["step"] = "hours"
            await msg.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è?")
        except ValueError:
            await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.")
        return

    # –®–∞–≥ 3 ‚Äî —á–∞—Å—ã
    if step == "hours":
        try:
            user_data[user_id]["hours"] = float(msg.text)
            user_data[user_id]["step"] = "orders"
            await msg.answer("–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Ç—ã –¥–æ—Å—Ç–∞–≤–∏–ª —Å–µ–≥–æ–¥–Ω—è?")
        except ValueError:
            await msg.answer("–ß–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # –®–∞–≥ 4 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    if step == "orders":
        try:
            user_data[user_id]["orders"] = int(msg.text)
            user_data[user_id]["step"] = "plus10_orders"
            await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +10‚ÇΩ?")
        except ValueError:
            await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # –®–∞–≥ 5 ‚Äî +10‚ÇΩ –∑–∞ –∑–∞–∫–∞–∑—ã
    if step == "plus10_orders":
        try:
            user_data[user_id]["plus10_orders"] = int(msg.text)
            user_data[user_id]["step"] = "plus30_orders"
            await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +30‚ÇΩ?")
        except ValueError:
            await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    # –®–∞–≥ 6 ‚Äî +30‚ÇΩ –∑–∞ –∑–∞–∫–∞–∑—ã
    if step == "plus30_orders":
        try:
            user_data[user_id]["plus30_orders"] = int(msg.text)
            user_data[user_id]["step"] = "plus70_orders"
            await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +70‚ÇΩ?")
        except ValueError:
            await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    # –®–∞–≥ 7 ‚Äî +70‚ÇΩ
    if step == "plus70_orders":
        try:
            user_data[user_id]["plus70_orders"] = int(msg.text)
            user_data[user_id]["step"] = "plus10_all"
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("–î–∞", "–ù–µ—Ç")
            await msg.answer("–ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +10‚ÇΩ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É?", reply_markup=kb)
        except ValueError:
            await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    # –®–∞–≥ 8 ‚Äî –Ω–∞–¥–±–∞–≤–∫–∞ –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
    if step == "plus10_all":
        if msg.text.lower() not in ("–¥–∞", "–Ω–µ—Ç"):
            await msg.answer("–û—Ç–≤–µ—Ç—å '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
            return
        user_data[user_id]["plus10_all"] = (msg.text.lower() == "–¥–∞")
        user_data[user_id]["step"] = "plus15_weather"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–î–∞", "–ù–µ—Ç")
        await msg.answer("–ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +15‚ÇΩ –∫ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ –∑–∞ –ø–æ–≥–æ–¥—É?", reply_markup=kb)
        return

    # –®–∞–≥ 9 ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç
    if step == "plus15_weather":
        if msg.text.lower() not in ("–¥–∞", "–Ω–µ—Ç"):
            await msg.answer("–û—Ç–≤–µ—Ç—å '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
            return
        user_data[user_id]["plus15_weather"] = (msg.text.lower() == "–¥–∞")

        data = user_data[user_id]
        base_salary = data['hours'] * data['hourly_rate'] + data['orders'] * data['order_rate']
        bonus_orders = (data['plus10_orders'] * 10 +
                        data['plus30_orders'] * 30 +
                        data['plus70_orders'] * 70)
        all_order_bonus = data['orders'] * 10 if data['plus10_all'] else 0
        weather_bonus = data['hours'] * 15 if data['plus15_weather'] else 0
        total = base_salary + bonus_orders + all_order_bonus + weather_bonus

        await msg.answer(
            f"üí∞ –†–∞—Å—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"–ß–∞—Å—ã: {data['hours']} √ó {data['hourly_rate']}‚ÇΩ = {data['hours'] * data['hourly_rate']:.2f}‚ÇΩ\n"
            f"–ó–∞–∫–∞–∑—ã: {data['orders']} √ó {data['order_rate']}‚ÇΩ = {data['orders'] * data['order_rate']:.2f}‚ÇΩ\n"
            f"–ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∑–∞–∫–∞–∑—ã: {bonus_orders}‚ÇΩ\n"
            f"–ù–∞–¥–±–∞–≤–∫–∞ +10‚ÇΩ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É: {all_order_bonus}‚ÇΩ\n"
            f"–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –ø–æ–≥–æ–¥—É: {weather_bonus}‚ÇΩ\n\n"
            f"üíµ *–ò–¢–û–ì–û: {total:.2f}‚ÇΩ*",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardRemove()
        )

        user_data.pop(user_id, None)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
