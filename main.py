from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
import asyncio
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable is not set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

@dp.message(Command("start"))
async def start(msg: types.Message):
    user_data[msg.from_user.id] = {}
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üí∏ –í–≤–µ–¥–∏ —á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (‚ÇΩ/—á–∞—Å):")

@dp.message(F.text.regexp(r"^\d+(\.\d+)?$") & (lambda msg: 'hourly_rate' not in user_data.get(msg.from_user.id, {})))
async def hourly_rate(msg: types.Message):
    user_data[msg.from_user.id]['hourly_rate'] = float(msg.text)
    await msg.answer("–°–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ (‚ÇΩ)?")

@dp.message(lambda msg: 'order_rate' not in user_data.get(msg.from_user.id, {}))
async def order_rate(msg: types.Message):
    try:
        user_data[msg.from_user.id]['order_rate'] = float(msg.text)
    except ValueError:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return
    await msg.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è?")

@dp.message(lambda msg: 'hours' not in user_data.get(msg.from_user.id, {}))
async def hours(msg: types.Message):
    try:
        user_data[msg.from_user.id]['hours'] = float(msg.text)
    except ValueError:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return
    await msg.answer("–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Ç—ã –¥–æ—Å—Ç–∞–≤–∏–ª —Å–µ–≥–æ–¥–Ω—è?")

@dp.message(lambda msg: 'orders' not in user_data.get(msg.from_user.id, {}))
async def orders(msg: types.Message):
    try:
        user_data[msg.from_user.id]['orders'] = int(msg.text)
    except ValueError:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +10‚ÇΩ?")

@dp.message(lambda msg: 'plus10_orders' not in user_data.get(msg.from_user.id, {}))
async def plus10_orders(msg: types.Message):
    try:
        user_data[msg.from_user.id]['plus10_orders'] = int(msg.text)
    except ValueError:
        await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return
    await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +30‚ÇΩ?")

@dp.message(lambda msg: 'plus30_orders' not in user_data.get(msg.from_user.id, {}))
async def plus30_orders(msg: types.Message):
    try:
        user_data[msg.from_user.id]['plus30_orders'] = int(msg.text)
    except ValueError:
        await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å –Ω–∞–¥–±–∞–≤–∫–æ–π +70‚ÇΩ?")

@dp.message(lambda msg: 'plus70_orders' not in user_data.get(msg.from_user.id, {}))
async def plus70_orders(msg: types.Message):
    try:
        user_data[msg.from_user.id]['plus70_orders'] = int(msg.text)
    except ValueError:
        await msg.answer("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–∞", "–ù–µ—Ç")
    await msg.answer("–ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +10‚ÇΩ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É?", reply_markup=keyboard)

@dp.message(lambda msg: 'plus10_all' not in user_data.get(msg.from_user.id, {}))
async def plus10_all(msg: types.Message):
    text = msg.text.lower()
    if text not in ("–¥–∞", "–Ω–µ—Ç"):
        await msg.answer("–û—Ç–≤–µ—Ç—å –î–∞ –∏–ª–∏ –ù–µ—Ç.")
        return
    user_data[msg.from_user.id]['plus10_all'] = (text == "–¥–∞")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–∞", "–ù–µ—Ç")
    await msg.answer("–ë—ã–ª–∞ –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞ +15‚ÇΩ –∫ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ –∑–∞ –ø–æ–≥–æ–¥—É?", reply_markup=keyboard)

@dp.message(lambda msg: 'plus15_weather' not in user_data.get(msg.from_user.id, {}))
async def plus15_weather(msg: types.Message):
    text = msg.text.lower()
    if text not in ("–¥–∞", "–Ω–µ—Ç"):
        await msg.answer("–û—Ç–≤–µ—Ç—å –î–∞ –∏–ª–∏ –ù–µ—Ç.")
        return
    user_data[msg.from_user.id]['plus15_weather'] = (text == "–¥–∞")

    data = user_data[msg.from_user.id]
    base_salary = data['hours'] * data['hourly_rate'] + data['orders'] * data['order_rate']
    bonus_orders = (data['plus10_orders'] * 10 +
                    data['plus30_orders'] * 30 +
                    data['plus70_orders'] * 70)
    all_order_bonus = data['orders'] * 10 if data['plus10_all'] else 0
    weather_bonus = data['hours'] * 15 if data['plus15_weather'] else 0
    total = base_salary + bonus_orders + all_order_bonus + weather_bonus

    await msg.answer(
        f"üí∞ –†–∞—Å—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"–ß–∞—Å—ã: {data['hours']} √ó {data['hourly_rate']}‚ÇΩ = {data['hours'] * data['hourly_rate']:.2f}‚ÇΩ\n"
        f"–ó–∞–∫–∞–∑—ã: {data['orders']} √ó {data['order_rate']}‚ÇΩ = {data['orders'] * data['order_rate']:.2f}‚ÇΩ\n"
        f"–ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∑–∞–∫–∞–∑—ã: {bonus_orders}‚ÇΩ\n"
        f"–ù–∞–¥–±–∞–≤–∫–∞ +10‚ÇΩ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É: {all_order_bonus}‚ÇΩ\n"
        f"–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –ø–æ–≥–æ–¥—É: {weather_bonus}‚ÇΩ\n\n"
        f"üíµ *–ò–¢–û–ì–û: {total:.2f}‚ÇΩ*",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )

    user_data.pop(msg.from_user.id, None)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
